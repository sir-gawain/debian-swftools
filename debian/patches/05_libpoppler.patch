Description: Make swftools build against libpoppler
Author: Christian Welzel <gawain@camlann.de>
Last-Update: 2012-02-05

--- swftools-0.9.1+201202040819+ds1.orig/configure.in
+++ swftools-0.9.1+201202040819+ds1/configure.in
@@ -331,7 +331,7 @@
 
 if test "x$USE_POPPLER" = "xtrue"; then
     AC_DEFINE([HAVE_POPPLER],[1],[use poppler])
-    #PKG_CHECK_MODULES([POPPLER],[poppler poppler-splash],,[poppler_pkgconfig=no])
+    PKG_CHECK_MODULES([POPPLER],[poppler poppler-splash],,[poppler_pkgconfig=no])
     if test "x$poppler_pkgconfig" = "xno"; then
         AC_LANG_PUSH([C++])
         AC_CHECK_HEADERS([OutputDev.h],[
--- swftools-0.9.1+201202040819+ds1.orig/lib/pdf/VectorGraphicOutputDev.cc
+++ swftools-0.9.1+201202040819+ds1/lib/pdf/VectorGraphicOutputDev.cc
@@ -1366,7 +1366,7 @@
 				   GBool inlineImg) 
 {
     if(config_textonly) {
-	OutputDev::drawImageMask(state,ref,str,width,height,invert,inlineImg);
+	OutputDev::drawImageMask(state,ref,str,width,height,invert,gFalse,inlineImg);
 	return;
     }
     dbg("drawImageMask %dx%d, invert=%d inline=%d", width, height, invert, inlineImg);
@@ -1379,7 +1379,7 @@
 			 int *maskColors, GBool inlineImg)
 {
     if(config_textonly) {
-	OutputDev::drawImage(state,ref,str,width,height,colorMap,maskColors,inlineImg);
+	OutputDev::drawImage(state,ref,str,width,height,colorMap,gFalse,maskColors,inlineImg);
 	return;
     }
     dbg("drawImage %dx%d, %s, %s, inline=%d", width, height, 
@@ -1403,7 +1403,7 @@
 			       GBool maskInvert)
 {
     if(config_textonly) {
-	OutputDev::drawMaskedImage(state,ref,str,width,height,colorMap,maskStr,maskWidth,maskHeight,maskInvert);
+	OutputDev::drawMaskedImage(state,ref,str,width,height,colorMap,gFalse,maskStr,maskWidth,maskHeight,maskInvert,gFalse);
 	return;
     }
     dbg("drawMaskedImage %dx%d, %s, %dx%d mask", width, height, 
@@ -1426,7 +1426,7 @@
 				   GfxImageColorMap *maskColorMap)
 {
     if(config_textonly) {
-	OutputDev::drawSoftMaskedImage(state,ref,str,width,height,colorMap,maskStr,maskWidth,maskHeight,maskColorMap);
+	OutputDev::drawSoftMaskedImage(state,ref,str,width,height,colorMap,gFalse,maskStr,maskWidth,maskHeight,maskColorMap,gFalse);
 	return;
     }
     dbg("drawSoftMaskedImage %dx%d, %s, %dx%d mask", width, height, 
--- swftools-0.9.1+201202040819+ds1.orig/lib/pdf/BitmapOutputDev.cc
+++ swftools-0.9.1+201202040819+ds1/lib/pdf/BitmapOutputDev.cc
@@ -26,6 +26,7 @@
 
 #ifdef HAVE_POPPLER
   #include "splash/SplashBitmap.h"
+  #include "splash/SplashGlyphBitmap.h"
   #include "splash/SplashPattern.h"
   #include "splash/Splash.h"
 #else
@@ -1086,11 +1087,11 @@
 
 GBool BitmapOutputDev::useShadedFills()
 {
-    boolpolydev->useShadedFills();
-    booltextdev->useShadedFills();
-    clip0dev->useShadedFills();
-    clip1dev->useShadedFills();
-    return rgbdev->useShadedFills();
+    boolpolydev->useShadedFills(42);
+    booltextdev->useShadedFills(42);
+    clip0dev->useShadedFills(42);
+    clip1dev->useShadedFills(42);
+    return rgbdev->useShadedFills(42);
 }
 
 GBool BitmapOutputDev::useDrawForm()
@@ -1619,9 +1620,9 @@
 {
 #ifdef USE_GETGLYPH_BBOX
     /* use getglyph to derive bounding box */
-    if(splash->needFontUpdate) {
-        splash->doUpdateFont(state);
-    }
+//    if(splash->needFontUpdate) {
+//        splash->doUpdateFont(state);
+//    }
     SplashGlyphBitmap glyph;
     double xt,yt;
     state->transform(x-originX, y-originY, &xt, &yt);
@@ -1634,7 +1635,7 @@
 
     SplashCoord*matrix = font->getMatrix();
 
-    if(font && font->getGlyph(code, xFrac, yFrac, &glyph)) {
+    if(font && font->getGlyph(code, xFrac, yFrac, &glyph, 0, 0, NULL, NULL)) {
         x1 = floor(x0-glyph.x);
         y1 = floor(y0-glyph.y);
         x2 = ceil(x0-glyph.x+glyph.w);
--- swftools-0.9.1+201202040819+ds1.orig/lib/pdf/FullBitmapOutputDev.cc
+++ swftools-0.9.1+201202040819+ds1/lib/pdf/FullBitmapOutputDev.cc
@@ -224,7 +224,7 @@
 }
 GBool FullBitmapOutputDev::useShadedFills()
 {
-    return rgbdev->useShadedFills();
+    return rgbdev->useShadedFills(42);
 }
 GBool FullBitmapOutputDev::useDrawForm()
 {
--- swftools-0.9.1+201202040819+ds1.orig/lib/pdf/CharOutputDev.cc
+++ swftools-0.9.1+201202040819+ds1/lib/pdf/CharOutputDev.cc
@@ -433,6 +433,12 @@
     return displayFontTT;
 }
 
+#if 0
+/* Debian:
+   Disable these two functions because they call functions with non matching
+   parameters and i couldn't figure out how to convert them. They seem not do
+   be used at all (grep shows no matches and compile runs fine without them.
+*/
 DisplayFontParam *GFXGlobalParams::getDisplayFont(GString *fontName)
 {
     msg("<verbose> looking for font %s", fontName->getCString());
@@ -510,6 +516,8 @@
     return dfp;
 }
 
+#endif
+
 CharOutputDev::CharOutputDev(InfoOutputDev*info, PDFDoc*doc, int*page2page, int num_pages, int x, int y, int x1, int y1, int x2, int y2)
 :CommonOutputDev(info, doc, page2page, num_pages, x, y, x1, y1, x2, y2)
 {
--- swftools-0.9.1+201202040819+ds1.orig/lib/pdf/InfoOutputDev.cc
+++ swftools-0.9.1+201202040819+ds1/lib/pdf/InfoOutputDev.cc
@@ -111,8 +111,6 @@
 }
 InfoOutputDev::~InfoOutputDev() 
 {
-    GHashIter*i;
-    
     DICT_ITERATE_DATA(this->fontcache, FontInfo*, fd) {
 	delete fd;
     }
@@ -568,13 +566,15 @@
 	current_splash_font = 0;
 	return;
     }
-    GfxState* state2 = state->copy();
-    state2->setPath(0);
+    font->incRefCnt(); // We steal the font from state, so increase refcounter here
+
+    GfxState *state2 = new GfxState(state->getHDPI(), state->getVDPI(), new PDFRectangle(0,0,1,1), state->getRotate(), true);
+
     state2->setCTM(1.0,0,0,1.0,0,0);
     splash->updateCTM(state2, 0,0,0,0,0,0);
     state2->setTextMat(1.0,0,0,1.0,0,0);
     state2->setFont(font, 1024.0);
-    splash->doUpdateFont(state2);
+//    splash->doUpdateFont(state2);
 
     current_splash_font = splash->getCurrentFont();
     delete state2;
@@ -693,8 +693,8 @@
 	fontinfo->font = font;
 	fontinfo->max_size = 0;
 	if(current_splash_font) {
-	    fontinfo->ascender = current_splash_font->ascender;
-	    fontinfo->descender = current_splash_font->descender;
+	    fontinfo->ascender = 0; // FIXME: current_splash_font->ascender;
+	    fontinfo->descender = 0; // FIXME: current_splash_font->descender;
 	} else {
 	    fontinfo->ascender = fontinfo->descender = 0;
 	}
@@ -778,9 +778,9 @@
     if(!g) {
 	g = fontinfo->glyphs[code] = new GlyphInfo();
 	g->advance_max = 0;
-	current_splash_font->last_advance = -1;
+//	current_splash_font->last_advance = -1;
 	g->path = current_splash_font->getGlyphPath(code);
-	g->advance = current_splash_font->last_advance;
+	g->advance = 0; // FIXME: current_splash_font->last_advance;
 	g->unicode = 0;
     }
     if(uLen && ((u[0]>=32 && u[0]<g->unicode) || !g->unicode)) {
@@ -970,7 +970,6 @@
     
 void InfoOutputDev::dumpfonts(gfxdevice_t*dev)
 {
-    GHashIter*i;
     GString*key;
 
     DICT_ITERATE_DATA(fontcache, FontInfo*, info) {
--- swftools-0.9.1+201202040819+ds1.orig/lib/pdf/Makefile.in
+++ swftools-0.9.1+201202040819+ds1/lib/pdf/Makefile.in
@@ -53,7 +53,7 @@
 	$(CC) -I ./ $(xpdf_include) InfoOutputDev.cc -o $@
 BitmapOutputDev.$(O): BitmapOutputDev.cc BitmapOutputDev.h CommonOutputDev.h InfoOutputDev.h
 	$(CC) -I ./ $(xpdf_include) BitmapOutputDev.cc -o $@
-XMLOutputDev.$(O): XMLOutputDev.cc XMLOutputDev.h xpdf/TextOutputDev.h
+XMLOutputDev.$(O): XMLOutputDev.cc XMLOutputDev.h
 	$(CC) -I ./ $(xpdf_include) XMLOutputDev.cc -o $@
 FullBitmapOutputDev.$(O): FullBitmapOutputDev.cc FullBitmapOutputDev.h CommonOutputDev.h InfoOutputDev.h
 	$(CC) -I ./ $(xpdf_include) FullBitmapOutputDev.cc -o $@
@@ -164,7 +164,7 @@
 	$(CC) -I ./ -I xpdf $< -o $@
 
 
-../libgfxpdf$(A): $(XPDFOK) $(libgfxpdf_objects) $(xpdf_in_source) $(splash_in_source)
+../libgfxpdf$(A): $(libgfxpdf_objects) $(xpdf_in_source) $(splash_in_source)
 	rm -f ../libgfxpdf$(A)
 	$(AR) r ../libgfxpdf$(A) $(libgfxpdf_objects) $(xpdf_in_source) $(splash_in_source)
 	$(RANLIB) ../libgfxpdf$(A)
--- swftools-0.9.1+201202040819+ds1.orig/lib/pdf/CharOutputDev.h
+++ swftools-0.9.1+201202040819+ds1/lib/pdf/CharOutputDev.h
@@ -112,8 +112,8 @@
     public:
     GFXGlobalParams();
     ~GFXGlobalParams();
-    virtual DisplayFontParam *getDisplayFont(GString *fontName);
-    virtual DisplayFontParam *getDisplayCIDFont(GString *fontName, GString *collection);
+//    virtual DisplayFontParam *getDisplayFont(GString *fontName);
+//    virtual DisplayFontParam *getDisplayCIDFont(GString *fontName, GString *collection);
 };
 
 #endif //__charoutputdev_h__
